'use strict';

var icons = {
  success: [40, 40, '<path d="m16.6 28.4l15-15-2.3-2.5-12.7 12.7-5.9-5.9-2.3 2.3z m3.4-25c9.2 0 16.6 7.4 16.6 16.6s-7.4 16.6-16.6 16.6-16.6-7.4-16.6-16.6 7.4-16.6 16.6-16.6z"/>'],
  warning: [40, 40, '<path d="m21.6 21.6v-10h-3.2v10h3.2z m0 6.8v-3.4h-3.2v3.4h3.2z m-1.6-25c9.2 0 16.6 7.4 16.6 16.6s-7.4 16.6-16.6 16.6-16.6-7.4-16.6-16.6 7.4-16.6 16.6-16.6z"/>'],
  info: [40, 40, '<path d="m21.6 15v-3.4h-3.2v3.4h3.2z m0 13.4v-10h-3.2v10h3.2z m-1.6-25c9.2 0 16.6 7.4 16.6 16.6s-7.4 16.6-16.6 16.6-16.6-7.4-16.6-16.6 7.4-16.6 16.6-16.6z"/>'],
  error: [40, 40, '<path d="m28.6 25q0-0.5-0.4-1l-4-4 4-4q0.4-0.5 0.4-1 0-0.6-0.4-1.1l-2-2q-0.4-0.4-1-0.4-0.6 0-1 0.4l-4.1 4.1-4-4.1q-0.4-0.4-1-0.4-0.6 0-1 0.4l-2 2q-0.5 0.5-0.5 1.1 0 0.5 0.5 1l4 4-4 4q-0.5 0.5-0.5 1 0 0.7 0.5 1.1l2 2q0.4 0.4 1 0.4 0.6 0 1-0.4l4-4.1 4.1 4.1q0.4 0.4 1 0.4 0.6 0 1-0.4l2-2q0.4-0.4 0.4-1z m8.7-5q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"/>']
};

var Icon = function Icon(type, height) {
  var iconInfo = icons[type];
  return '<svg class=\'notification__icon\' height=' + (height || iconInfo[1]) + '\n  viewBox=\'0 0 ' + iconInfo[0] + ' ' + iconInfo[1] + '\' >' + iconInfo[2] + '</svg>';
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultConfig = {
  type: 'error',
  timeout: 2,
  position: 'tc'
};

var Notification = function () {
  function Notification(config) {
    _classCallCheck(this, Notification);

    Object.assign(this, defaultConfig, config);
    this.init();
    this.open();
  }

  _createClass(Notification, [{
    key: 'getContainer',
    value: function getContainer() {
      // create container subject to position
      var containerId = 'notify-container--' + this.position;
      var container = document.getElementsByClassName(containerId)[0];
      if (!container) {
        container = document.createElement('div');
        container.className = 'notify-container ' + containerId;
        document.body.appendChild(container);
      }
      return container;
    }
  }, {
    key: 'open',
    value: function open() {
      var _this = this;

      window.requestAnimationFrame(function () {
        return _this.notification.classList.add('notification--opened');
      }, 0);
    }
  }, {
    key: 'close',
    value: function close() {
      var _this2 = this;

      this.notification.classList.remove('notification--opened');
      setTimeout(function () {
        return _this2.notification.parentNode.removeChild(_this2.notification);
      }, 500);
    }
  }, {
    key: 'init',
    value: function init() {
      var _this3 = this;

      this.getContainer();
      var notification = document.createElement('div');
      notification.className = 'notification notification--' + this.type;
      notification.innerHTML = '<div class=\'notification__header\'>' + Icon(this.type) + '</div>\n    <div class=\'notification__body\'>' + this.msg + '</div>';

      var container = this.getContainer();
      container.insertBefore(notification, container.firstChild);

      this.notification = notification;
      if (this.timeout) {
        setTimeout(function () {
          return _this3.close();
        }, this.timeout * 1000);
      }
    }
  }]);

  return Notification;
}();

/**
 * display notification
 * @param {string|object} msg - msg or config options
 * @param {string} [type='error'] - msg type: 'error', 'success' or 'info'
 * @param {number} [timeout=2] - how long the msg will hide in seconds
 */


var notify = function notify(msg) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig.type;
  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultConfig.timeout;
  var position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultConfig.position;

  var config = (typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object' ? msg : { msg: msg, type: type, timeout: timeout };
  return new Notification(config);
};

module.exports = notify;
